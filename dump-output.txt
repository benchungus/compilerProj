Warning : Terminal "INCREMENT" was declared but never used
Warning : Terminal "RCURLBRACK" was declared but never used
Warning : Terminal "STRINGLIT" was declared but never used
Warning : Terminal "DECREMENT" was declared but never used
Warning : Terminal "NOT" was declared but never used
Warning : Terminal "SEMICOLON" was declared but never used
Warning : Terminal "VOIDTYPE" was declared but never used
Warning : Terminal "CLASS" was declared but never used
Warning : Terminal "ASSIGN" was declared but never used
Warning : Terminal "IF" was declared but never used
Warning : Terminal "RETURN" was declared but never used
Warning : Terminal "PRINTLINE" was declared but never used
Warning : Terminal "TRUE" was declared but never used
Warning : Terminal "FLOATLIT" was declared but never used
Warning : Terminal "BOOLTYPE" was declared but never used
Warning : Terminal "COLON" was declared but never used
Warning : Terminal "ELSE" was declared but never used
Warning : Terminal "READ" was declared but never used
Warning : Terminal "FINAL" was declared but never used
Warning : Terminal "WHILE" was declared but never used
Warning : Terminal "INTTYPE" was declared but never used
Warning : Terminal "LCURLBRACK" was declared but never used
Warning : Terminal "CHARACTERLIT" was declared but never used
Warning : Terminal "QUESTION" was declared but never used
Warning : Terminal "FLOATTYPE" was declared but never used
Warning : Terminal "CHARTYPE" was declared but never used
Warning : Terminal "FALSE" was declared but never used
Warning : Terminal "PRINT" was declared but never used
===== Terminals =====
[0]EOF [1]error [2]LPAREN [3]RPAREN [4]COLON 
[5]MINUS [6]PLUS [7]MULTIPLY [8]DIVIDE [9]NOT 
[10]TRUE [11]FALSE [12]NOTEQUAL [13]LESSEQUAL [14]GREATEREQUAL 
[15]EQUAL [16]LESS [17]GREATER [18]OR [19]AND 
[20]QUESTION [21]ASSIGN [22]VOIDTYPE [23]INTTYPE [24]FLOATTYPE 
[25]BOOLTYPE [26]CHARTYPE [27]COMMA [28]SEMICOLON [29]RETURN 
[30]CLASS [31]ELSE [32]IF [33]WHILE [34]READ 
[35]PRINT [36]PRINTLINE [37]LSQBRACK [38]RSQBRACK [39]LCURLBRACK 
[40]RCURLBRACK [41]INCREMENT [42]DECREMENT [43]FINAL [44]ID 
[45]NUMBERLIT [46]FLOATLIT [47]CHARACTERLIT [48]STRINGLIT 

===== Non terminals =====
[0]program [1]expr [2]name [3]args 

===== Productions =====
[0] program ::= args 
[1] $START ::= program EOF 
[2] args ::= expr COMMA args 
[3] args ::= expr 
[4] args ::= 
[5] expr ::= NUMBERLIT 
[6] expr ::= name 
[7] expr ::= ID LPAREN RPAREN 
[8] expr ::= ID LPAREN args RPAREN 
[9] expr ::= expr PLUS expr 
[10] expr ::= expr MINUS expr 
[11] expr ::= expr MULTIPLY expr 
[12] expr ::= expr DIVIDE expr 
[13] expr ::= expr GREATER expr 
[14] expr ::= expr LESS expr 
[15] expr ::= expr GREATEREQUAL expr 
[16] expr ::= expr LESSEQUAL expr 
[17] expr ::= expr EQUAL expr 
[18] expr ::= expr NOTEQUAL expr 
[19] expr ::= expr OR expr 
[20] expr ::= expr AND expr 
[21] name ::= ID 
[22] name ::= ID LSQBRACK expr RSQBRACK 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [expr ::= (*) NUMBERLIT , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr MINUS expr , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr GREATEREQUAL expr , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr AND expr , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [args ::= (*) expr , {EOF }]
  [expr ::= (*) ID LPAREN args RPAREN , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr GREATER expr , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr NOTEQUAL expr , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [$START ::= (*) program EOF , {EOF }]
  [expr ::= (*) name , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr MULTIPLY expr , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr LESSEQUAL expr , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [name ::= (*) ID , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [args ::= (*) , {EOF }]
  [expr ::= (*) expr PLUS expr , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr LESS expr , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr OR expr , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [args ::= (*) expr COMMA args , {EOF }]
  [expr ::= (*) ID LPAREN RPAREN , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr DIVIDE expr , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr EQUAL expr , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {EOF MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [program ::= (*) args , {EOF }]
}
transition on expr to state [6]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on args to state [3]
transition on program to state [2]
transition on ID to state [1]

-------------------
lalr_state [1]: {
  [name ::= ID (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= ID (*) LPAREN RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= ID (*) LSQBRACK expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= ID (*) LPAREN args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on LSQBRACK to state [35]
transition on LPAREN to state [34]

-------------------
lalr_state [2]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [33]

-------------------
lalr_state [3]: {
  [program ::= args (*) , {EOF }]
}

-------------------
lalr_state [4]: {
  [expr ::= name (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}

-------------------
lalr_state [5]: {
  [expr ::= NUMBERLIT (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}

-------------------
lalr_state [6]: {
  [expr ::= expr (*) EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= expr (*) LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= expr (*) MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [args ::= expr (*) COMMA args , {EOF RPAREN }]
  [expr ::= expr (*) OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= expr (*) LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= expr (*) GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= expr (*) MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= expr (*) NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= expr (*) GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= expr (*) DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= expr (*) PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [args ::= expr (*) , {EOF RPAREN }]
  [expr ::= expr (*) AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
}
transition on OR to state [19]
transition on GREATEREQUAL to state [18]
transition on COMMA to state [17]
transition on LESS to state [16]
transition on PLUS to state [15]
transition on EQUAL to state [14]
transition on GREATER to state [13]
transition on LESSEQUAL to state [12]
transition on MULTIPLY to state [11]
transition on NOTEQUAL to state [10]
transition on DIVIDE to state [9]
transition on MINUS to state [8]
transition on AND to state [7]

-------------------
lalr_state [7]: {
  [expr ::= (*) NUMBERLIT , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr AND (*) expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) name , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on expr to state [32]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on ID to state [1]

-------------------
lalr_state [8]: {
  [expr ::= (*) NUMBERLIT , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) name , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr MINUS (*) expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on expr to state [31]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on ID to state [1]

-------------------
lalr_state [9]: {
  [expr ::= (*) NUMBERLIT , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) name , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr DIVIDE (*) expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on expr to state [30]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on ID to state [1]

-------------------
lalr_state [10]: {
  [expr ::= (*) NUMBERLIT , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr NOTEQUAL (*) expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) name , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on expr to state [29]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on ID to state [1]

-------------------
lalr_state [11]: {
  [expr ::= (*) NUMBERLIT , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr MULTIPLY (*) expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) name , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on expr to state [28]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on ID to state [1]

-------------------
lalr_state [12]: {
  [expr ::= (*) NUMBERLIT , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) name , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr LESSEQUAL (*) expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on expr to state [27]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on ID to state [1]

-------------------
lalr_state [13]: {
  [expr ::= (*) NUMBERLIT , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr GREATER (*) expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) name , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on expr to state [26]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on ID to state [1]

-------------------
lalr_state [14]: {
  [expr ::= (*) NUMBERLIT , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) name , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr EQUAL (*) expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on expr to state [25]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on ID to state [1]

-------------------
lalr_state [15]: {
  [expr ::= (*) NUMBERLIT , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) name , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr PLUS (*) expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on expr to state [24]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on ID to state [1]

-------------------
lalr_state [16]: {
  [expr ::= (*) NUMBERLIT , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) name , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr LESS (*) expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on expr to state [23]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on ID to state [1]

-------------------
lalr_state [17]: {
  [expr ::= (*) NUMBERLIT , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [args ::= (*) expr , {EOF RPAREN }]
  [expr ::= (*) ID LPAREN args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) name , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [name ::= (*) ID , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [args ::= (*) , {EOF RPAREN }]
  [expr ::= (*) expr PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [args ::= expr COMMA (*) args , {EOF RPAREN }]
  [args ::= (*) expr COMMA args , {EOF RPAREN }]
  [expr ::= (*) ID LPAREN RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
}
transition on expr to state [6]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on args to state [22]
transition on ID to state [1]

-------------------
lalr_state [18]: {
  [expr ::= expr GREATEREQUAL (*) expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) NUMBERLIT , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) name , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on expr to state [21]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on ID to state [1]

-------------------
lalr_state [19]: {
  [expr ::= (*) NUMBERLIT , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) name , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr OR (*) expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) ID LPAREN RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on expr to state [20]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on ID to state [1]

-------------------
lalr_state [20]: {
  [expr ::= expr (*) EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr OR expr (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on OR to state [19]
transition on GREATEREQUAL to state [18]
transition on LESS to state [16]
transition on PLUS to state [15]
transition on EQUAL to state [14]
transition on GREATER to state [13]
transition on LESSEQUAL to state [12]
transition on MULTIPLY to state [11]
transition on NOTEQUAL to state [10]
transition on DIVIDE to state [9]
transition on MINUS to state [8]
transition on AND to state [7]

-------------------
lalr_state [21]: {
  [expr ::= expr (*) EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr GREATEREQUAL expr (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on OR to state [19]
transition on GREATEREQUAL to state [18]
transition on LESS to state [16]
transition on PLUS to state [15]
transition on EQUAL to state [14]
transition on GREATER to state [13]
transition on LESSEQUAL to state [12]
transition on MULTIPLY to state [11]
transition on NOTEQUAL to state [10]
transition on DIVIDE to state [9]
transition on MINUS to state [8]
transition on AND to state [7]

-------------------
lalr_state [22]: {
  [args ::= expr COMMA args (*) , {EOF RPAREN }]
}

-------------------
lalr_state [23]: {
  [expr ::= expr (*) EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr LESS expr (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on OR to state [19]
transition on GREATEREQUAL to state [18]
transition on LESS to state [16]
transition on PLUS to state [15]
transition on EQUAL to state [14]
transition on GREATER to state [13]
transition on LESSEQUAL to state [12]
transition on MULTIPLY to state [11]
transition on NOTEQUAL to state [10]
transition on DIVIDE to state [9]
transition on MINUS to state [8]
transition on AND to state [7]

-------------------
lalr_state [24]: {
  [expr ::= expr (*) EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr PLUS expr (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on OR to state [19]
transition on GREATEREQUAL to state [18]
transition on LESS to state [16]
transition on PLUS to state [15]
transition on EQUAL to state [14]
transition on GREATER to state [13]
transition on LESSEQUAL to state [12]
transition on MULTIPLY to state [11]
transition on NOTEQUAL to state [10]
transition on DIVIDE to state [9]
transition on MINUS to state [8]
transition on AND to state [7]

-------------------
lalr_state [25]: {
  [expr ::= expr (*) EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr EQUAL expr (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on OR to state [19]
transition on GREATEREQUAL to state [18]
transition on LESS to state [16]
transition on PLUS to state [15]
transition on EQUAL to state [14]
transition on GREATER to state [13]
transition on LESSEQUAL to state [12]
transition on MULTIPLY to state [11]
transition on NOTEQUAL to state [10]
transition on DIVIDE to state [9]
transition on MINUS to state [8]
transition on AND to state [7]

-------------------
lalr_state [26]: {
  [expr ::= expr (*) EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr GREATER expr (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on OR to state [19]
transition on GREATEREQUAL to state [18]
transition on LESS to state [16]
transition on PLUS to state [15]
transition on EQUAL to state [14]
transition on GREATER to state [13]
transition on LESSEQUAL to state [12]
transition on MULTIPLY to state [11]
transition on NOTEQUAL to state [10]
transition on DIVIDE to state [9]
transition on MINUS to state [8]
transition on AND to state [7]

-------------------
lalr_state [27]: {
  [expr ::= expr (*) EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr LESSEQUAL expr (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on OR to state [19]
transition on GREATEREQUAL to state [18]
transition on LESS to state [16]
transition on PLUS to state [15]
transition on EQUAL to state [14]
transition on GREATER to state [13]
transition on LESSEQUAL to state [12]
transition on MULTIPLY to state [11]
transition on NOTEQUAL to state [10]
transition on DIVIDE to state [9]
transition on MINUS to state [8]
transition on AND to state [7]

-------------------
lalr_state [28]: {
  [expr ::= expr (*) EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr MULTIPLY expr (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on OR to state [19]
transition on GREATEREQUAL to state [18]
transition on LESS to state [16]
transition on PLUS to state [15]
transition on EQUAL to state [14]
transition on GREATER to state [13]
transition on LESSEQUAL to state [12]
transition on MULTIPLY to state [11]
transition on NOTEQUAL to state [10]
transition on DIVIDE to state [9]
transition on MINUS to state [8]
transition on AND to state [7]

-------------------
lalr_state [29]: {
  [expr ::= expr (*) EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr NOTEQUAL expr (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on OR to state [19]
transition on GREATEREQUAL to state [18]
transition on LESS to state [16]
transition on PLUS to state [15]
transition on EQUAL to state [14]
transition on GREATER to state [13]
transition on LESSEQUAL to state [12]
transition on MULTIPLY to state [11]
transition on NOTEQUAL to state [10]
transition on DIVIDE to state [9]
transition on MINUS to state [8]
transition on AND to state [7]

-------------------
lalr_state [30]: {
  [expr ::= expr (*) EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr DIVIDE expr (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on OR to state [19]
transition on GREATEREQUAL to state [18]
transition on LESS to state [16]
transition on PLUS to state [15]
transition on EQUAL to state [14]
transition on GREATER to state [13]
transition on LESSEQUAL to state [12]
transition on MULTIPLY to state [11]
transition on NOTEQUAL to state [10]
transition on DIVIDE to state [9]
transition on MINUS to state [8]
transition on AND to state [7]

-------------------
lalr_state [31]: {
  [expr ::= expr (*) EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr MINUS expr (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on OR to state [19]
transition on GREATEREQUAL to state [18]
transition on LESS to state [16]
transition on PLUS to state [15]
transition on EQUAL to state [14]
transition on GREATER to state [13]
transition on LESSEQUAL to state [12]
transition on MULTIPLY to state [11]
transition on NOTEQUAL to state [10]
transition on DIVIDE to state [9]
transition on MINUS to state [8]
transition on AND to state [7]

-------------------
lalr_state [32]: {
  [expr ::= expr (*) EQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MULTIPLY expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) OR expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) LESSEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATER expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) MINUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) NOTEQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) GREATEREQUAL expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) DIVIDE expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) PLUS expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr AND expr (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) AND expr , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on OR to state [19]
transition on GREATEREQUAL to state [18]
transition on LESS to state [16]
transition on PLUS to state [15]
transition on EQUAL to state [14]
transition on GREATER to state [13]
transition on LESSEQUAL to state [12]
transition on MULTIPLY to state [11]
transition on NOTEQUAL to state [10]
transition on DIVIDE to state [9]
transition on MINUS to state [8]
transition on AND to state [7]

-------------------
lalr_state [33]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
lalr_state [34]: {
  [expr ::= (*) NUMBERLIT , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr MINUS expr , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr GREATEREQUAL expr , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr AND expr , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= ID LPAREN (*) args RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [args ::= (*) expr , {RPAREN }]
  [expr ::= (*) ID LPAREN args RPAREN , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr GREATER expr , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr NOTEQUAL expr , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) name , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr MULTIPLY expr , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr LESSEQUAL expr , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [name ::= (*) ID , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [args ::= (*) , {RPAREN }]
  [expr ::= (*) expr PLUS expr , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr LESS expr , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr OR expr , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= ID LPAREN (*) RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [args ::= (*) expr COMMA args , {RPAREN }]
  [expr ::= (*) ID LPAREN RPAREN , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr DIVIDE expr , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [expr ::= (*) expr EQUAL expr , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA }]
}
transition on expr to state [6]
transition on NUMBERLIT to state [5]
transition on args to state [39]
transition on name to state [4]
transition on RPAREN to state [38]
transition on ID to state [1]

-------------------
lalr_state [35]: {
  [expr ::= (*) NUMBERLIT , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= (*) expr MINUS expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= (*) expr GREATEREQUAL expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= (*) expr AND expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= (*) ID LPAREN args RPAREN , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= (*) expr GREATER expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= (*) expr NOTEQUAL expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= (*) name , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= (*) expr MULTIPLY expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= (*) expr LESSEQUAL expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [name ::= (*) ID , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= (*) expr PLUS expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= (*) expr LESS expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= (*) expr OR expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= (*) ID LPAREN RPAREN , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= (*) expr DIVIDE expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [name ::= ID LSQBRACK (*) expr RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= (*) expr EQUAL expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [name ::= (*) ID LSQBRACK expr RSQBRACK , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
}
transition on expr to state [36]
transition on NUMBERLIT to state [5]
transition on name to state [4]
transition on ID to state [1]

-------------------
lalr_state [36]: {
  [expr ::= expr (*) EQUAL expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= expr (*) LESS expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= expr (*) MULTIPLY expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [name ::= ID LSQBRACK expr (*) RSQBRACK , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
  [expr ::= expr (*) OR expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= expr (*) LESSEQUAL expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= expr (*) GREATER expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= expr (*) MINUS expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= expr (*) NOTEQUAL expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= expr (*) GREATEREQUAL expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= expr (*) DIVIDE expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= expr (*) PLUS expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
  [expr ::= expr (*) AND expr , {MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND RSQBRACK }]
}
transition on OR to state [19]
transition on GREATEREQUAL to state [18]
transition on LESS to state [16]
transition on PLUS to state [15]
transition on RSQBRACK to state [37]
transition on EQUAL to state [14]
transition on GREATER to state [13]
transition on LESSEQUAL to state [12]
transition on MULTIPLY to state [11]
transition on NOTEQUAL to state [10]
transition on DIVIDE to state [9]
transition on MINUS to state [8]
transition on AND to state [7]

-------------------
lalr_state [37]: {
  [name ::= ID LSQBRACK expr RSQBRACK (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}

-------------------
lalr_state [38]: {
  [expr ::= ID LPAREN RPAREN (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}

-------------------
lalr_state [39]: {
  [expr ::= ID LPAREN args (*) RPAREN , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}
transition on RPAREN to state [40]

-------------------
lalr_state [40]: {
  [expr ::= ID LPAREN args RPAREN (*) , {EOF RPAREN MINUS PLUS MULTIPLY DIVIDE NOTEQUAL LESSEQUAL GREATEREQUAL EQUAL LESS GREATER OR AND COMMA RSQBRACK }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 0:REDUCE(with prod 4)] [term 44:SHIFT(to state 1)]
 [term 45:SHIFT(to state 5)]
From state #1
 [term 0:REDUCE(with prod 21)] [term 2:SHIFT(to state 34)]
 [term 3:REDUCE(with prod 21)] [term 5:REDUCE(with prod 21)]
 [term 6:REDUCE(with prod 21)] [term 7:REDUCE(with prod 21)]
 [term 8:REDUCE(with prod 21)] [term 12:REDUCE(with prod 21)]
 [term 13:REDUCE(with prod 21)] [term 14:REDUCE(with prod 21)]
 [term 15:REDUCE(with prod 21)] [term 16:REDUCE(with prod 21)]
 [term 17:REDUCE(with prod 21)] [term 18:REDUCE(with prod 21)]
 [term 19:REDUCE(with prod 21)] [term 27:REDUCE(with prod 21)]
 [term 37:SHIFT(to state 35)] [term 38:REDUCE(with prod 21)]
From state #2
 [term 0:SHIFT(to state 33)]
From state #3
 [term 0:REDUCE(with prod 0)]
From state #4
 [term 0:REDUCE(with prod 6)] [term 3:REDUCE(with prod 6)]
 [term 5:REDUCE(with prod 6)] [term 6:REDUCE(with prod 6)]
 [term 7:REDUCE(with prod 6)] [term 8:REDUCE(with prod 6)]
 [term 12:REDUCE(with prod 6)] [term 13:REDUCE(with prod 6)]
 [term 14:REDUCE(with prod 6)] [term 15:REDUCE(with prod 6)]
 [term 16:REDUCE(with prod 6)] [term 17:REDUCE(with prod 6)]
 [term 18:REDUCE(with prod 6)] [term 19:REDUCE(with prod 6)]
 [term 27:REDUCE(with prod 6)] [term 38:REDUCE(with prod 6)]
From state #5
 [term 0:REDUCE(with prod 5)] [term 3:REDUCE(with prod 5)]
 [term 5:REDUCE(with prod 5)] [term 6:REDUCE(with prod 5)]
 [term 7:REDUCE(with prod 5)] [term 8:REDUCE(with prod 5)]
 [term 12:REDUCE(with prod 5)] [term 13:REDUCE(with prod 5)]
 [term 14:REDUCE(with prod 5)] [term 15:REDUCE(with prod 5)]
 [term 16:REDUCE(with prod 5)] [term 17:REDUCE(with prod 5)]
 [term 18:REDUCE(with prod 5)] [term 19:REDUCE(with prod 5)]
 [term 27:REDUCE(with prod 5)] [term 38:REDUCE(with prod 5)]
From state #6
 [term 0:REDUCE(with prod 3)] [term 3:REDUCE(with prod 3)]
 [term 5:SHIFT(to state 8)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 11)] [term 8:SHIFT(to state 9)]
 [term 12:SHIFT(to state 10)] [term 13:SHIFT(to state 12)]
 [term 14:SHIFT(to state 18)] [term 15:SHIFT(to state 14)]
 [term 16:SHIFT(to state 16)] [term 17:SHIFT(to state 13)]
 [term 18:SHIFT(to state 19)] [term 19:SHIFT(to state 7)]
 [term 27:SHIFT(to state 17)]
From state #7
 [term 44:SHIFT(to state 1)] [term 45:SHIFT(to state 5)]
From state #8
 [term 44:SHIFT(to state 1)] [term 45:SHIFT(to state 5)]
From state #9
 [term 44:SHIFT(to state 1)] [term 45:SHIFT(to state 5)]
From state #10
 [term 44:SHIFT(to state 1)] [term 45:SHIFT(to state 5)]
From state #11
 [term 44:SHIFT(to state 1)] [term 45:SHIFT(to state 5)]
From state #12
 [term 44:SHIFT(to state 1)] [term 45:SHIFT(to state 5)]
From state #13
 [term 44:SHIFT(to state 1)] [term 45:SHIFT(to state 5)]
From state #14
 [term 44:SHIFT(to state 1)] [term 45:SHIFT(to state 5)]
From state #15
 [term 44:SHIFT(to state 1)] [term 45:SHIFT(to state 5)]
From state #16
 [term 44:SHIFT(to state 1)] [term 45:SHIFT(to state 5)]
From state #17
 [term 0:REDUCE(with prod 4)] [term 3:REDUCE(with prod 4)]
 [term 44:SHIFT(to state 1)] [term 45:SHIFT(to state 5)]
From state #18
 [term 44:SHIFT(to state 1)] [term 45:SHIFT(to state 5)]
From state #19
 [term 44:SHIFT(to state 1)] [term 45:SHIFT(to state 5)]
From state #20
 [term 0:REDUCE(with prod 19)] [term 3:REDUCE(with prod 19)]
 [term 5:SHIFT(to state 8)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 11)] [term 8:SHIFT(to state 9)]
 [term 12:SHIFT(to state 10)] [term 13:SHIFT(to state 12)]
 [term 14:SHIFT(to state 18)] [term 15:SHIFT(to state 14)]
 [term 16:SHIFT(to state 16)] [term 17:SHIFT(to state 13)]
 [term 18:REDUCE(with prod 19)] [term 19:SHIFT(to state 7)]
 [term 27:REDUCE(with prod 19)] [term 38:REDUCE(with prod 19)]
From state #21
 [term 0:REDUCE(with prod 15)] [term 3:REDUCE(with prod 15)]
 [term 5:SHIFT(to state 8)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 11)] [term 8:SHIFT(to state 9)]
 [term 12:REDUCE(with prod 15)] [term 13:REDUCE(with prod 15)]
 [term 14:REDUCE(with prod 15)] [term 15:REDUCE(with prod 15)]
 [term 16:REDUCE(with prod 15)] [term 17:REDUCE(with prod 15)]
 [term 18:REDUCE(with prod 15)] [term 19:REDUCE(with prod 15)]
 [term 27:REDUCE(with prod 15)] [term 38:REDUCE(with prod 15)]
From state #22
 [term 0:REDUCE(with prod 2)] [term 3:REDUCE(with prod 2)]
From state #23
 [term 0:REDUCE(with prod 14)] [term 3:REDUCE(with prod 14)]
 [term 5:SHIFT(to state 8)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 11)] [term 8:SHIFT(to state 9)]
 [term 12:REDUCE(with prod 14)] [term 13:REDUCE(with prod 14)]
 [term 14:REDUCE(with prod 14)] [term 15:REDUCE(with prod 14)]
 [term 16:REDUCE(with prod 14)] [term 17:REDUCE(with prod 14)]
 [term 18:REDUCE(with prod 14)] [term 19:REDUCE(with prod 14)]
 [term 27:REDUCE(with prod 14)] [term 38:REDUCE(with prod 14)]
From state #24
 [term 0:REDUCE(with prod 9)] [term 3:REDUCE(with prod 9)]
 [term 5:REDUCE(with prod 9)] [term 6:REDUCE(with prod 9)]
 [term 7:SHIFT(to state 11)] [term 8:SHIFT(to state 9)]
 [term 12:REDUCE(with prod 9)] [term 13:REDUCE(with prod 9)]
 [term 14:REDUCE(with prod 9)] [term 15:REDUCE(with prod 9)]
 [term 16:REDUCE(with prod 9)] [term 17:REDUCE(with prod 9)]
 [term 18:REDUCE(with prod 9)] [term 19:REDUCE(with prod 9)]
 [term 27:REDUCE(with prod 9)] [term 38:REDUCE(with prod 9)]
From state #25
 [term 0:REDUCE(with prod 17)] [term 3:REDUCE(with prod 17)]
 [term 5:SHIFT(to state 8)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 11)] [term 8:SHIFT(to state 9)]
 [term 12:REDUCE(with prod 17)] [term 13:SHIFT(to state 12)]
 [term 14:SHIFT(to state 18)] [term 15:REDUCE(with prod 17)]
 [term 16:SHIFT(to state 16)] [term 17:SHIFT(to state 13)]
 [term 18:REDUCE(with prod 17)] [term 19:REDUCE(with prod 17)]
 [term 27:REDUCE(with prod 17)] [term 38:REDUCE(with prod 17)]
From state #26
 [term 0:REDUCE(with prod 13)] [term 3:REDUCE(with prod 13)]
 [term 5:SHIFT(to state 8)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 11)] [term 8:SHIFT(to state 9)]
 [term 12:REDUCE(with prod 13)] [term 13:REDUCE(with prod 13)]
 [term 14:REDUCE(with prod 13)] [term 15:REDUCE(with prod 13)]
 [term 16:REDUCE(with prod 13)] [term 17:REDUCE(with prod 13)]
 [term 18:REDUCE(with prod 13)] [term 19:REDUCE(with prod 13)]
 [term 27:REDUCE(with prod 13)] [term 38:REDUCE(with prod 13)]
From state #27
 [term 0:REDUCE(with prod 16)] [term 3:REDUCE(with prod 16)]
 [term 5:SHIFT(to state 8)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 11)] [term 8:SHIFT(to state 9)]
 [term 12:REDUCE(with prod 16)] [term 13:REDUCE(with prod 16)]
 [term 14:REDUCE(with prod 16)] [term 15:REDUCE(with prod 16)]
 [term 16:REDUCE(with prod 16)] [term 17:REDUCE(with prod 16)]
 [term 18:REDUCE(with prod 16)] [term 19:REDUCE(with prod 16)]
 [term 27:REDUCE(with prod 16)] [term 38:REDUCE(with prod 16)]
From state #28
 [term 0:REDUCE(with prod 11)] [term 3:REDUCE(with prod 11)]
 [term 5:REDUCE(with prod 11)] [term 6:REDUCE(with prod 11)]
 [term 7:REDUCE(with prod 11)] [term 8:REDUCE(with prod 11)]
 [term 12:REDUCE(with prod 11)] [term 13:REDUCE(with prod 11)]
 [term 14:REDUCE(with prod 11)] [term 15:REDUCE(with prod 11)]
 [term 16:REDUCE(with prod 11)] [term 17:REDUCE(with prod 11)]
 [term 18:REDUCE(with prod 11)] [term 19:REDUCE(with prod 11)]
 [term 27:REDUCE(with prod 11)] [term 38:REDUCE(with prod 11)]
From state #29
 [term 0:REDUCE(with prod 18)] [term 3:REDUCE(with prod 18)]
 [term 5:SHIFT(to state 8)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 11)] [term 8:SHIFT(to state 9)]
 [term 12:REDUCE(with prod 18)] [term 13:SHIFT(to state 12)]
 [term 14:SHIFT(to state 18)] [term 15:REDUCE(with prod 18)]
 [term 16:SHIFT(to state 16)] [term 17:SHIFT(to state 13)]
 [term 18:REDUCE(with prod 18)] [term 19:REDUCE(with prod 18)]
 [term 27:REDUCE(with prod 18)] [term 38:REDUCE(with prod 18)]
From state #30
 [term 0:REDUCE(with prod 12)] [term 3:REDUCE(with prod 12)]
 [term 5:REDUCE(with prod 12)] [term 6:REDUCE(with prod 12)]
 [term 7:REDUCE(with prod 12)] [term 8:REDUCE(with prod 12)]
 [term 12:REDUCE(with prod 12)] [term 13:REDUCE(with prod 12)]
 [term 14:REDUCE(with prod 12)] [term 15:REDUCE(with prod 12)]
 [term 16:REDUCE(with prod 12)] [term 17:REDUCE(with prod 12)]
 [term 18:REDUCE(with prod 12)] [term 19:REDUCE(with prod 12)]
 [term 27:REDUCE(with prod 12)] [term 38:REDUCE(with prod 12)]
From state #31
 [term 0:REDUCE(with prod 10)] [term 3:REDUCE(with prod 10)]
 [term 5:REDUCE(with prod 10)] [term 6:REDUCE(with prod 10)]
 [term 7:SHIFT(to state 11)] [term 8:SHIFT(to state 9)]
 [term 12:REDUCE(with prod 10)] [term 13:REDUCE(with prod 10)]
 [term 14:REDUCE(with prod 10)] [term 15:REDUCE(with prod 10)]
 [term 16:REDUCE(with prod 10)] [term 17:REDUCE(with prod 10)]
 [term 18:REDUCE(with prod 10)] [term 19:REDUCE(with prod 10)]
 [term 27:REDUCE(with prod 10)] [term 38:REDUCE(with prod 10)]
From state #32
 [term 0:REDUCE(with prod 20)] [term 3:REDUCE(with prod 20)]
 [term 5:SHIFT(to state 8)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 11)] [term 8:SHIFT(to state 9)]
 [term 12:SHIFT(to state 10)] [term 13:SHIFT(to state 12)]
 [term 14:SHIFT(to state 18)] [term 15:SHIFT(to state 14)]
 [term 16:SHIFT(to state 16)] [term 17:SHIFT(to state 13)]
 [term 18:REDUCE(with prod 20)] [term 19:REDUCE(with prod 20)]
 [term 27:REDUCE(with prod 20)] [term 38:REDUCE(with prod 20)]
From state #33
 [term 0:REDUCE(with prod 1)]
From state #34
 [term 3:SHIFT(to state 38)] [term 44:SHIFT(to state 1)]
 [term 45:SHIFT(to state 5)]
From state #35
 [term 44:SHIFT(to state 1)] [term 45:SHIFT(to state 5)]
From state #36
 [term 5:SHIFT(to state 8)] [term 6:SHIFT(to state 15)]
 [term 7:SHIFT(to state 11)] [term 8:SHIFT(to state 9)]
 [term 12:SHIFT(to state 10)] [term 13:SHIFT(to state 12)]
 [term 14:SHIFT(to state 18)] [term 15:SHIFT(to state 14)]
 [term 16:SHIFT(to state 16)] [term 17:SHIFT(to state 13)]
 [term 18:SHIFT(to state 19)] [term 19:SHIFT(to state 7)]
 [term 38:SHIFT(to state 37)]
From state #37
 [term 0:REDUCE(with prod 22)] [term 3:REDUCE(with prod 22)]
 [term 5:REDUCE(with prod 22)] [term 6:REDUCE(with prod 22)]
 [term 7:REDUCE(with prod 22)] [term 8:REDUCE(with prod 22)]
 [term 12:REDUCE(with prod 22)] [term 13:REDUCE(with prod 22)]
 [term 14:REDUCE(with prod 22)] [term 15:REDUCE(with prod 22)]
 [term 16:REDUCE(with prod 22)] [term 17:REDUCE(with prod 22)]
 [term 18:REDUCE(with prod 22)] [term 19:REDUCE(with prod 22)]
 [term 27:REDUCE(with prod 22)] [term 38:REDUCE(with prod 22)]
From state #38
 [term 0:REDUCE(with prod 7)] [term 3:REDUCE(with prod 7)]
 [term 5:REDUCE(with prod 7)] [term 6:REDUCE(with prod 7)]
 [term 7:REDUCE(with prod 7)] [term 8:REDUCE(with prod 7)]
 [term 12:REDUCE(with prod 7)] [term 13:REDUCE(with prod 7)]
 [term 14:REDUCE(with prod 7)] [term 15:REDUCE(with prod 7)]
 [term 16:REDUCE(with prod 7)] [term 17:REDUCE(with prod 7)]
 [term 18:REDUCE(with prod 7)] [term 19:REDUCE(with prod 7)]
 [term 27:REDUCE(with prod 7)] [term 38:REDUCE(with prod 7)]
From state #39
 [term 3:SHIFT(to state 40)]
From state #40
 [term 0:REDUCE(with prod 8)] [term 3:REDUCE(with prod 8)]
 [term 5:REDUCE(with prod 8)] [term 6:REDUCE(with prod 8)]
 [term 7:REDUCE(with prod 8)] [term 8:REDUCE(with prod 8)]
 [term 12:REDUCE(with prod 8)] [term 13:REDUCE(with prod 8)]
 [term 14:REDUCE(with prod 8)] [term 15:REDUCE(with prod 8)]
 [term 16:REDUCE(with prod 8)] [term 17:REDUCE(with prod 8)]
 [term 18:REDUCE(with prod 8)] [term 19:REDUCE(with prod 8)]
 [term 27:REDUCE(with prod 8)] [term 38:REDUCE(with prod 8)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 2] [non term 1->state 6] [non term 2->state 4]
 [non term 3->state 3]
From state #1
From state #2
From state #3
From state #4
From state #5
From state #6
From state #7
 [non term 1->state 32] [non term 2->state 4]
From state #8
 [non term 1->state 31] [non term 2->state 4]
From state #9
 [non term 1->state 30] [non term 2->state 4]
From state #10
 [non term 1->state 29] [non term 2->state 4]
From state #11
 [non term 1->state 28] [non term 2->state 4]
From state #12
 [non term 1->state 27] [non term 2->state 4]
From state #13
 [non term 1->state 26] [non term 2->state 4]
From state #14
 [non term 1->state 25] [non term 2->state 4]
From state #15
 [non term 1->state 24] [non term 2->state 4]
From state #16
 [non term 1->state 23] [non term 2->state 4]
From state #17
 [non term 1->state 6] [non term 2->state 4] [non term 3->state 22]
From state #18
 [non term 1->state 21] [non term 2->state 4]
From state #19
 [non term 1->state 20] [non term 2->state 4]
From state #20
From state #21
From state #22
From state #23
From state #24
From state #25
From state #26
From state #27
From state #28
From state #29
From state #30
From state #31
From state #32
From state #33
From state #34
 [non term 1->state 6] [non term 2->state 4] [non term 3->state 39]
From state #35
 [non term 1->state 36] [non term 2->state 4]
From state #36
From state #37
From state #38
From state #39
From state #40
-----------------------------
------- CUP v0.11b 20160615 (GIT 4ac7450) Parser Generation Summary -------
  0 errors and 28 warnings
  49 terminals, 4 non-terminals, and 23 productions declared, 
  producing 41 unique parse states.
  28 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (CUP v0.11b 20160615 (GIT 4ac7450))

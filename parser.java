
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\007\000\002\002\004\000\002\002" +
    "\006\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\006\000\002\021\005\000\002\021\007\000" +
    "\002\021\004\000\002\021\006\000\002\017\010\000\002" +
    "\017\007\000\002\017\002\000\002\017\011\000\002\023" +
    "\013\000\002\024\015\000\002\024\002\000\002\026\003" +
    "\000\002\027\004\000\002\027\002\000\002\030\003\000" +
    "\002\030\003\000\002\031\003\000\002\031\002\000\002" +
    "\032\005\000\002\032\003\000\002\033\004\000\002\033" +
    "\006\000\002\006\003\000\002\006\005\000\002\014\004" +
    "\000\002\014\002\000\002\015\007\000\002\015\002\000" +
    "\002\013\006\000\002\013\007\000\002\013\007\000\002" +
    "\013\007\000\002\013\006\000\002\013\007\000\002\013" +
    "\004\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\012\000\002\013\013\000\002\013\007\000" +
    "\002\010\003\000\002\010\002\000\002\016\003\000\002" +
    "\016\002\000\002\011\003\000\002\011\005\000\002\012" +
    "\003\000\002\012\005\000\002\003\003\000\002\003\003" +
    "\000\002\003\005\000\002\003\006\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\005\000\002\003\004\000\002\003\011\000\002\003" +
    "\006\000\002\003\004\000\002\003\004\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\005\003\000\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\040\005\001\002\000\004\002\326\001" +
    "\002\000\004\056\006\001\002\000\004\051\007\001\002" +
    "\000\020\030\012\031\017\032\016\033\011\034\013\052" +
    "\015\055\020\001\002\000\004\052\325\001\002\000\006" +
    "\005\uffac\056\uffac\001\002\000\004\056\323\001\002\000" +
    "\006\005\uffad\056\uffad\001\002\000\004\056\131\001\002" +
    "\000\004\002\uffff\001\002\000\006\005\uffab\056\uffab\001" +
    "\002\000\006\005\uffae\056\uffae\001\002\000\012\031\017" +
    "\032\016\033\011\034\013\001\002\000\004\056\022\001" +
    "\002\000\010\027\026\036\uffed\047\024\001\002\000\004" +
    "\052\ufffb\001\002\000\004\057\125\001\002\000\004\036" +
    "\123\001\002\000\030\004\042\007\027\010\033\013\040" +
    "\014\032\015\034\056\036\057\035\060\037\061\031\062" +
    "\043\001\002\000\030\004\042\007\027\010\033\013\040" +
    "\014\032\015\034\056\036\057\035\060\037\061\031\062" +
    "\043\001\002\000\046\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\035\uffc8\036\uffc8" +
    "\050\uffc8\001\002\000\046\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\035\uffb7\036" +
    "\uffb7\050\uffb7\001\002\000\046\005\uffb9\006\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\035\uffb9" +
    "\036\uffb9\050\uffb9\001\002\000\030\004\042\007\027\010" +
    "\033\013\040\014\032\015\034\056\036\057\035\060\037" +
    "\061\031\062\043\001\002\000\046\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\011\uffb8\012\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\035" +
    "\uffb8\036\uffb8\050\uffb8\001\002\000\046\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\012\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\035\uffc9\036\uffc9\050\uffc9\001\002\000\052\004\107\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\035\uffaa\036\uffaa\047\110\050\uffaa\001\002" +
    "\000\046\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\035\uffb5\036\uffb5\050\uffb5\001" +
    "\002\000\030\004\042\007\027\010\033\013\040\014\032" +
    "\015\034\056\036\057\035\060\037\061\031\062\043\001" +
    "\002\000\034\007\050\010\060\011\054\012\053\016\052" +
    "\017\056\020\062\021\057\022\061\023\055\024\063\025" +
    "\051\036\uffee\001\002\000\040\004\042\007\027\010\033" +
    "\013\040\014\032\015\034\031\017\032\016\033\011\034" +
    "\013\056\036\057\035\060\037\061\031\062\043\001\002" +
    "\000\046\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\035\uffb6\036\uffb6\050\uffb6\001" +
    "\002\000\036\005\101\007\050\010\060\011\054\012\053" +
    "\016\052\017\056\020\062\021\057\022\061\023\055\024" +
    "\063\025\051\026\100\001\002\000\004\005\046\001\002" +
    "\000\030\004\042\007\027\010\033\013\040\014\032\015" +
    "\034\056\036\057\035\060\037\061\031\062\043\001\002" +
    "\000\046\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\035\uffb1\036\uffb1\050\uffb1\001" +
    "\002\000\030\004\042\007\027\010\033\013\040\014\032" +
    "\015\034\056\036\057\035\060\037\061\031\062\043\001" +
    "\002\000\030\004\042\007\027\010\033\013\040\014\032" +
    "\015\034\056\036\057\035\060\037\061\031\062\043\001" +
    "\002\000\030\004\042\007\027\010\033\013\040\014\032" +
    "\015\034\056\036\057\035\060\037\061\031\062\043\001" +
    "\002\000\030\004\042\007\027\010\033\013\040\014\032" +
    "\015\034\056\036\057\035\060\037\061\031\062\043\001" +
    "\002\000\030\004\042\007\027\010\033\013\040\014\032" +
    "\015\034\056\036\057\035\060\037\061\031\062\043\001" +
    "\002\000\030\004\042\007\027\010\033\013\040\014\032" +
    "\015\034\056\036\057\035\060\037\061\031\062\043\001" +
    "\002\000\030\004\042\007\027\010\033\013\040\014\032" +
    "\015\034\056\036\057\035\060\037\061\031\062\043\001" +
    "\002\000\030\004\042\007\027\010\033\013\040\014\032" +
    "\015\034\056\036\057\035\060\037\061\031\062\043\001" +
    "\002\000\030\004\042\007\027\010\033\013\040\014\032" +
    "\015\034\056\036\057\035\060\037\061\031\062\043\001" +
    "\002\000\030\004\042\007\027\010\033\013\040\014\032" +
    "\015\034\056\036\057\035\060\037\061\031\062\043\001" +
    "\002\000\030\004\042\007\027\010\033\013\040\014\032" +
    "\015\034\056\036\057\035\060\037\061\031\062\043\001" +
    "\002\000\030\004\042\007\027\010\033\013\040\014\032" +
    "\015\034\056\036\057\035\060\037\061\031\062\043\001" +
    "\002\000\046\005\uffbb\006\uffbb\007\050\010\060\011\054" +
    "\012\053\016\052\017\056\020\062\021\057\022\061\023" +
    "\055\024\uffbb\025\051\026\uffbb\035\uffbb\036\uffbb\050\uffbb" +
    "\001\002\000\046\005\uffbf\006\uffbf\007\050\010\060\011" +
    "\054\012\053\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\035\uffbf\036\uffbf\050" +
    "\uffbf\001\002\000\046\005\uffc0\006\uffc0\007\050\010\060" +
    "\011\054\012\053\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\035\uffc0\036\uffc0" +
    "\050\uffc0\001\002\000\046\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\054\012\053\016\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\035\uffc5\036" +
    "\uffc5\050\uffc5\001\002\000\046\005\uffbd\006\uffbd\007\050" +
    "\010\060\011\054\012\053\016\uffbd\017\056\020\062\021" +
    "\uffbd\022\061\023\055\024\uffbd\025\uffbd\026\uffbd\035\uffbd" +
    "\036\uffbd\050\uffbd\001\002\000\046\005\uffbe\006\uffbe\007" +
    "\050\010\060\011\054\012\053\016\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\035" +
    "\uffbe\036\uffbe\050\uffbe\001\002\000\046\005\uffc1\006\uffc1" +
    "\007\050\010\060\011\054\012\053\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\035\uffc1\036\uffc1\050\uffc1\001\002\000\046\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\035\uffc3\036\uffc3\050\uffc3\001\002\000\046\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\035\uffc2\036\uffc2\050\uffc2\001\002\000\046\005" +
    "\uffbc\006\uffbc\007\050\010\060\011\054\012\053\016\uffbc" +
    "\017\056\020\062\021\uffbc\022\061\023\055\024\uffbc\025" +
    "\uffbc\026\uffbc\035\uffbc\036\uffbc\050\uffbc\001\002\000\046" +
    "\005\uffba\006\uffba\007\050\010\060\011\054\012\053\016" +
    "\052\017\056\020\062\021\057\022\061\023\055\024\uffba" +
    "\025\uffba\026\uffba\035\uffba\036\uffba\050\uffba\001\002\000" +
    "\046\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\054\012\053" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\035\uffc4\036\uffc4\050\uffc4\001\002" +
    "\000\030\004\042\007\027\010\033\013\040\014\032\015" +
    "\034\056\036\057\035\060\037\061\031\062\043\001\002" +
    "\000\046\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\035\uffb4\036\uffb4\050\uffb4\001" +
    "\002\000\034\006\103\007\050\010\060\011\054\012\053" +
    "\016\052\017\056\020\062\021\057\022\061\023\055\024" +
    "\063\025\051\001\002\000\030\004\042\007\027\010\033" +
    "\013\040\014\032\015\034\056\036\057\035\060\037\061" +
    "\031\062\043\001\002\000\034\005\105\007\050\010\060" +
    "\011\054\012\053\016\052\017\056\020\062\021\057\022" +
    "\061\023\055\024\063\025\051\001\002\000\046\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\035\uffb2\036\uffb2\050\uffb2\001\002\000\046\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025" +
    "\uffb3\026\uffb3\035\uffb3\036\uffb3\050\uffb3\001\002\000\032" +
    "\004\042\005\114\007\027\010\033\013\040\014\032\015" +
    "\034\056\036\057\035\060\037\061\031\062\043\001\002" +
    "\000\030\004\042\007\027\010\033\013\040\014\032\015" +
    "\034\056\036\057\035\060\037\061\031\062\043\001\002" +
    "\000\034\007\050\010\060\011\054\012\053\016\052\017" +
    "\056\020\062\021\057\022\061\023\055\024\063\025\051" +
    "\050\112\001\002\000\054\005\uffa9\006\uffa9\007\uffa9\010" +
    "\uffa9\011\uffa9\012\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\035" +
    "\uffa9\036\uffa9\050\uffa9\053\uffa9\054\uffa9\001\002\000\004" +
    "\005\120\001\002\000\046\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\035\uffc7\036" +
    "\uffc7\050\uffc7\001\002\000\036\005\uffe4\007\050\010\060" +
    "\011\054\012\053\016\052\017\056\020\062\021\057\022" +
    "\061\023\055\024\063\025\051\035\116\001\002\000\030" +
    "\004\042\007\027\010\033\013\040\014\032\015\034\056" +
    "\036\057\035\060\037\061\031\062\043\001\002\000\004" +
    "\005\uffe3\001\002\000\046\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\035\uffc6\036" +
    "\uffc6\050\uffc6\001\002\000\046\005\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\011\uffb0\012\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\035\uffb0" +
    "\036\uffb0\050\uffb0\001\002\000\046\005\uffaf\006\uffaf\007" +
    "\uffaf\010\uffaf\011\uffaf\012\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\035" +
    "\uffaf\036\uffaf\050\uffaf\001\002\000\020\030\012\031\017" +
    "\032\016\033\011\034\013\052\ufff8\055\020\001\002\000" +
    "\004\052\ufffa\001\002\000\004\050\126\001\002\000\004" +
    "\036\127\001\002\000\020\030\012\031\017\032\016\033" +
    "\011\034\013\052\ufff7\055\020\001\002\000\004\052\ufff9" +
    "\001\002\000\012\004\133\027\026\036\uffed\047\024\001" +
    "\002\000\004\052\ufffd\001\002\000\014\005\uffe9\031\017" +
    "\032\016\033\011\034\013\001\002\000\004\052\ufffc\001" +
    "\002\000\006\005\uffe7\035\321\001\002\000\004\056\316" +
    "\001\002\000\004\005\uffea\001\002\000\004\005\141\001" +
    "\002\000\004\051\142\001\002\000\036\031\017\032\016" +
    "\033\011\034\013\037\ufff4\042\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\051\ufff4\052\ufff4\055\146\056\ufff4\001\002" +
    "\000\012\031\017\032\016\033\011\034\013\001\002\000" +
    "\024\037\171\042\166\043\162\044\160\045\170\046\172" +
    "\051\164\052\uffe1\056\167\001\002\000\004\056\147\001" +
    "\002\000\012\031\uffef\032\uffef\033\uffef\034\uffef\001\002" +
    "\000\010\027\026\036\uffed\047\150\001\002\000\004\057" +
    "\154\001\002\000\004\036\152\001\002\000\036\031\017" +
    "\032\016\033\011\034\013\037\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\046\ufff4\051\ufff4\052\ufff4\055\146\056\ufff4" +
    "\001\002\000\024\037\ufff5\042\ufff5\043\ufff5\044\ufff5\045" +
    "\ufff5\046\ufff5\051\ufff5\052\ufff5\056\ufff5\001\002\000\004" +
    "\050\155\001\002\000\004\036\156\001\002\000\036\031" +
    "\017\032\016\033\011\034\013\037\ufff4\042\ufff4\043\ufff4" +
    "\044\ufff4\045\ufff4\046\ufff4\051\ufff4\052\ufff4\055\146\056" +
    "\ufff4\001\002\000\024\037\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\046\ufff3\051\ufff3\052\ufff3\056\ufff3\001\002\000" +
    "\004\004\301\001\002\000\004\052\261\001\002\000\004" +
    "\004\252\001\002\000\010\027\245\053\244\054\243\001" +
    "\002\000\036\031\017\032\016\033\011\034\013\037\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\051\ufff4\052" +
    "\ufff4\055\146\056\ufff4\001\002\000\024\037\171\042\166" +
    "\043\162\044\160\045\170\046\172\051\164\052\uffe1\056" +
    "\167\001\002\000\004\004\220\001\002\000\014\004\212" +
    "\027\uffaa\047\110\053\uffaa\054\uffaa\001\002\000\004\004" +
    "\206\001\002\000\032\004\042\007\027\010\033\013\040" +
    "\014\032\015\034\036\203\056\036\057\035\060\037\061" +
    "\031\062\043\001\002\000\004\004\173\001\002\000\032" +
    "\004\042\005\uffd0\007\027\010\033\013\040\014\032\015" +
    "\034\056\036\057\035\060\037\061\031\062\043\001\002" +
    "\000\004\005\uffd1\001\002\000\004\005\201\001\002\000" +
    "\036\005\uffcd\007\050\010\060\011\054\012\053\016\052" +
    "\017\056\020\062\021\057\022\061\023\055\024\063\025" +
    "\051\035\177\001\002\000\030\004\042\007\027\010\033" +
    "\013\040\014\032\015\034\056\036\057\035\060\037\061" +
    "\031\062\043\001\002\000\004\005\uffcc\001\002\000\004" +
    "\036\202\001\002\000\024\037\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\045\uffdb\046\uffdb\051\uffdb\052\uffdb\056\uffdb\001\002" +
    "\000\024\037\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\051\uffd8\052\uffd8\056\uffd8\001\002\000\034\007\050" +
    "\010\060\011\054\012\053\016\052\017\056\020\062\021" +
    "\057\022\061\023\055\024\063\025\051\036\205\001\002" +
    "\000\024\037\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\051\uffd7\052\uffd7\056\uffd7\001\002\000\030\004\042" +
    "\007\027\010\033\013\040\014\032\015\034\056\036\057" +
    "\035\060\037\061\031\062\043\001\002\000\004\005\210" +
    "\001\002\000\004\036\211\001\002\000\024\037\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\051\uffdc\052\uffdc" +
    "\056\uffdc\001\002\000\032\004\042\005\214\007\027\010" +
    "\033\013\040\014\032\015\034\056\036\057\035\060\037" +
    "\061\031\062\043\001\002\000\004\005\216\001\002\000" +
    "\004\036\215\001\002\000\024\037\uffda\042\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\051\uffda\052\uffda\056\uffda\001" +
    "\002\000\004\036\217\001\002\000\024\037\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\046\uffd9\051\uffd9\052\uffd9\056" +
    "\uffd9\001\002\000\030\004\042\007\027\010\033\013\040" +
    "\014\032\015\034\056\036\057\035\060\037\061\031\062" +
    "\043\001\002\000\034\005\222\007\050\010\060\011\054" +
    "\012\053\016\052\017\056\020\062\021\057\022\061\023" +
    "\055\024\063\025\051\001\002\000\004\051\223\001\002" +
    "\000\036\031\017\032\016\033\011\034\013\037\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\051\ufff4\052\ufff4" +
    "\055\146\056\ufff4\001\002\000\024\037\171\042\166\043" +
    "\162\044\160\045\170\046\172\051\164\052\uffe1\056\167" +
    "\001\002\000\004\052\226\001\002\000\026\037\uffdf\041" +
    "\227\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\051\uffdf" +
    "\052\uffdf\056\uffdf\001\002\000\004\051\231\001\002\000" +
    "\024\037\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\051\uffd3\052\uffd3\056\uffd3\001\002\000\036\031\017\032" +
    "\016\033\011\034\013\037\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\045\ufff4\046\ufff4\051\ufff4\052\ufff4\055\146\056\ufff4\001" +
    "\002\000\024\037\171\042\166\043\162\044\160\045\170" +
    "\046\172\051\164\052\uffe1\056\167\001\002\000\004\052" +
    "\234\001\002\000\024\037\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\051\uffe0\052\uffe0\056\uffe0\001\002\000" +
    "\004\052\uffe2\001\002\000\024\037\171\042\166\043\162" +
    "\044\160\045\170\046\172\051\164\052\uffe1\056\167\001" +
    "\002\000\004\052\240\001\002\000\026\036\241\037\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\051\uffce\052" +
    "\uffce\056\uffce\001\002\000\036\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\037\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\051\uffcf\052\uffcf\056\uffcf\001\002\000\024" +
    "\037\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\051" +
    "\uffd2\052\uffd2\056\uffd2\001\002\000\004\036\251\001\002" +
    "\000\004\036\250\001\002\000\030\004\042\007\027\010" +
    "\033\013\040\014\032\015\034\056\036\057\035\060\037" +
    "\061\031\062\043\001\002\000\034\007\050\010\060\011" +
    "\054\012\053\016\052\017\056\020\062\021\057\022\061" +
    "\023\055\024\063\025\051\036\247\001\002\000\024\037" +
    "\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\051\uffde" +
    "\052\uffde\056\uffde\001\002\000\024\037\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\051\uffd6\052\uffd6\056\uffd6" +
    "\001\002\000\024\037\uffd5\042\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\051\uffd5\052\uffd5\056\uffd5\001\002\000\030" +
    "\004\042\007\027\010\033\013\040\014\032\015\034\056" +
    "\036\057\035\060\037\061\031\062\043\001\002\000\034" +
    "\005\254\007\050\010\060\011\054\012\053\016\052\017" +
    "\056\020\062\021\057\022\061\023\055\024\063\025\051" +
    "\001\002\000\004\051\255\001\002\000\036\031\017\032" +
    "\016\033\011\034\013\037\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\045\ufff4\046\ufff4\051\ufff4\052\ufff4\055\146\056\ufff4\001" +
    "\002\000\024\037\171\042\166\043\162\044\160\045\170" +
    "\046\172\051\164\052\uffe1\056\167\001\002\000\004\052" +
    "\260\001\002\000\024\037\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\051\uffd4\052\uffd4\056\uffd4\001\002\000" +
    "\020\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\036\241" +
    "\052\uffce\001\002\000\016\030\266\031\017\032\016\033" +
    "\011\034\013\052\ufff0\001\002\000\004\052\ufff2\001\002" +
    "\000\004\056\uffec\001\002\000\004\056\267\001\002\000" +
    "\004\056\uffeb\001\002\000\004\004\270\001\002\000\014" +
    "\005\uffe9\031\017\032\016\033\011\034\013\001\002\000" +
    "\004\005\272\001\002\000\004\051\273\001\002\000\036" +
    "\031\017\032\016\033\011\034\013\037\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\046\ufff4\051\ufff4\052\ufff4\055\146" +
    "\056\ufff4\001\002\000\024\037\171\042\166\043\162\044" +
    "\160\045\170\046\172\051\164\052\uffe1\056\167\001\002" +
    "\000\004\052\276\001\002\000\020\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\036\241\052\uffce\001\002\000\016" +
    "\030\266\031\017\032\016\033\011\034\013\052\ufff0\001" +
    "\002\000\004\052\ufff1\001\002\000\004\056\302\001\002" +
    "\000\010\005\uffaa\035\uffaa\047\110\001\002\000\006\005" +
    "\uffcb\035\307\001\002\000\004\005\305\001\002\000\004" +
    "\036\306\001\002\000\024\037\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\051\uffdd\052\uffdd\056\uffdd\001\002" +
    "\000\004\056\302\001\002\000\004\005\uffca\001\002\000" +
    "\004\056\312\001\002\000\006\027\026\036\uffed\001\002" +
    "\000\004\036\314\001\002\000\036\031\017\032\016\033" +
    "\011\034\013\037\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\046\ufff4\051\ufff4\052\ufff4\055\146\056\ufff4\001\002\000" +
    "\024\037\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\051\ufff6\052\ufff6\056\ufff6\001\002\000\010\005\uffe6\035" +
    "\uffe6\047\317\001\002\000\004\050\320\001\002\000\006" +
    "\005\uffe5\035\uffe5\001\002\000\012\031\017\032\016\033" +
    "\011\034\013\001\002\000\004\005\uffe8\001\002\000\004" +
    "\004\133\001\002\000\004\052\ufffe\001\002\000\004\002" +
    "\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\013\022\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\020\001" +
    "\001\000\002\001\001\000\006\021\022\027\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\040\005\027\001\001\000\006\003\121\005\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\120\005\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\105\005\027\001\001\000\002\001\001\000\010" +
    "\003\043\005\027\007\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\046\005\027" +
    "\001\001\000\002\001\001\000\006\003\076\005\027\001" +
    "\001\000\006\003\075\005\027\001\001\000\006\003\074" +
    "\005\027\001\001\000\006\003\073\005\027\001\001\000" +
    "\006\003\072\005\027\001\001\000\006\003\071\005\027" +
    "\001\001\000\006\003\070\005\027\001\001\000\006\003" +
    "\067\005\027\001\001\000\006\003\066\005\027\001\001" +
    "\000\006\003\065\005\027\001\001\000\006\003\064\005" +
    "\027\001\001\000\006\003\063\005\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\101\005\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\103\005\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\114\005\027\006\112\001" +
    "\001\000\006\003\110\005\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\114\005\027\006\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\013\022\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\013\022\127\001\001\000\002\001\001\000\010\021\133" +
    "\023\131\027\024\001\001\000\002\001\001\000\012\007" +
    "\135\031\137\032\136\033\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\144\017\143" +
    "\026\142\001\001\000\004\007\310\001\001\000\010\005" +
    "\162\013\164\014\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\144\017\152\026\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\144\017\156\026\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\144\017\235\026\142\001\001" +
    "\000\010\005\162\013\164\014\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\203" +
    "\005\027\001\001\000\002\001\001\000\012\003\175\005" +
    "\027\010\174\011\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\175\005\027\011" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\175\005\027\011\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\114\005\027\006\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\220\005\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\144\017\223\026\142\001" +
    "\001\000\010\005\162\013\164\014\224\001\001\000\002" +
    "\001\001\000\004\015\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\144\017\231\026\142\001\001" +
    "\000\010\005\162\013\164\014\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\162" +
    "\013\164\014\236\001\001\000\002\001\001\000\004\016" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\245\005\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\252\005\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\144\017\255" +
    "\026\142\001\001\000\010\005\162\013\164\014\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\261" +
    "\001\001\000\010\007\263\024\262\030\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\135\031\270\032" +
    "\136\033\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\144\017\273\026\142\001\001\000\010\005" +
    "\162\013\164\014\274\001\001\000\002\001\001\000\004" +
    "\016\276\001\001\000\010\007\263\024\277\030\264\001" +
    "\001\000\002\001\001\000\006\005\302\012\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\302\012\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\312\001\001\000\002\001\001\000\010\007\144\017\314" +
    "\026\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\135\032\321" +
    "\033\134\001\001\000\002\001\001\000\004\023\323\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS ID LCURLBRACK memberdecls RCURLBRACK 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MemberDecls md = (MemberDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(i, md); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= CLASS ID LCURLBRACK RCURLBRACK 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Program(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // memberdecls ::= VOIDTYPE ID methoddeclend 
            {
              MemberDecls RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDecls mde = (MethodDecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MemberDecls(i, mde, "VOID"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // memberdecls ::= type ID methoddeclend 
            {
              MemberDecls RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDecls mde = (MethodDecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MemberDecls(t, i, mde); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // memberdecls ::= type ID fielddeclend 
            {
              MemberDecls RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldDecls fde = (FieldDecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MemberDecls(t, i, fde, "nonfinal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // memberdecls ::= FINAL type ID fielddeclend 
            {
              MemberDecls RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldDecls fde = (FieldDecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MemberDecls(t, i, fde, "final"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fielddeclend ::= optionalexpr SEMICOLON memberdecls 
            {
              FieldDecls RESULT =null;
		int oeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		OptionalExpr oe = (OptionalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MemberDecls md = (MemberDecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldDecls(oe, md); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddeclend",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fielddeclend ::= LSQBRACK NUMBERLIT RSQBRACK SEMICOLON memberdecls 
            {
              FieldDecls RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		int n = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MemberDecls md = (MemberDecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldDecls(n, md); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddeclend",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fielddeclend ::= optionalexpr SEMICOLON 
            {
              FieldDecls RESULT =null;
		int oeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OptionalExpr oe = (OptionalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FieldDecls(oe, "no end"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddeclend",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fielddeclend ::= LSQBRACK NUMBERLIT RSQBRACK SEMICOLON 
            {
              FieldDecls RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		int n = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FieldDecls(n, "no end brack"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddeclend",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fielddecllist ::= optionalfinal type ID optionalexpr SEMICOLON fielddecllist 
            {
              FieldDecls RESULT =null;
		int ofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		OptionalFinal of = (OptionalFinal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		OptionalExpr oe = (OptionalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldDecls fdl = (FieldDecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldDecls(of, t, i, oe, fdl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecllist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fielddecllist ::= type ID optionalexpr SEMICOLON fielddecllist 
            {
              FieldDecls RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		OptionalExpr oe = (OptionalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldDecls fdl = (FieldDecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldDecls(t, i, oe, fdl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecllist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fielddecllist ::= 
            {
              FieldDecls RESULT =null;
		 RESULT = new FieldDecls(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecllist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fielddecllist ::= type ID LSQBRACK NUMBERLIT RSQBRACK SEMICOLON fielddecllist 
            {
              FieldDecls RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		int n = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldDecls fdl = (FieldDecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldDecls(t, i, n, fdl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecllist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // methoddeclend ::= LPAREN argdecls RPAREN LCURLBRACK fielddecllist stmts RCURLBRACK optionalsemi methoddecllist 
            {
              MethodDecls RESULT =null;
		int adsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int adsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArgDecls ads = (ArgDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		FieldDecls fdl = (FieldDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementList ss = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OptionalSemi os = (OptionalSemi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDecls mdl = (MethodDecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodDecls(ads, fdl, ss, os, mdl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddeclend",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methoddecllist ::= returntype ID LPAREN argdecls RPAREN LCURLBRACK fielddecllist stmts RCURLBRACK optionalsemi methoddecllist 
            {
              MethodDecls RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ReturnType rt = (ReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int adsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int adsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArgDecls ads = (ArgDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		FieldDecls fdl = (FieldDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementList ss = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OptionalSemi os = (OptionalSemi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDecls mdl = (MethodDecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodDecls(rt, i, ads, fdl, ss, os, mdl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecllist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // methoddecllist ::= 
            {
              MethodDecls RESULT =null;
		 RESULT = new MethodDecls(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecllist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optionalfinal ::= FINAL 
            {
              OptionalFinal RESULT =null;
		 RESULT = new OptionalFinal("FINAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalfinal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // optionalexpr ::= ASSIGN expr 
            {
              OptionalExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OptionalExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // optionalexpr ::= 
            {
              OptionalExpr RESULT =null;
		 RESULT = new OptionalExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // returntype ::= type 
            {
              ReturnType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnType(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returntype",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // returntype ::= VOIDTYPE 
            {
              ReturnType RESULT =null;
		 RESULT = new ReturnType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returntype",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // argdecls ::= argdecllist 
            {
              ArgDecls RESULT =null;
		int adlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgDeclList adl = (ArgDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgDecls(adl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // argdecls ::= 
            {
              ArgDecls RESULT =null;
		 RESULT = new ArgDecls(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // argdecllist ::= argdecl COMMA argdecllist 
            {
              ArgDeclList RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgDecl ad = (ArgDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int adlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgDeclList adl = (ArgDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgDeclList(ad, adl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecllist",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // argdecllist ::= argdecl 
            {
              ArgDeclList RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgDecl ad = (ArgDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgDeclList(ad); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecllist",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // argdecl ::= type ID 
            {
              ArgDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgDecl(t, i, "no brack"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argdecl ::= type ID LSQBRACK RSQBRACK 
            {
              ArgDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArgDecl(t, i, "brack"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // args ::= expr 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Args(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // args ::= expr COMMA args 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Args(e,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmts ::= stmt stmts 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList ss = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatementList(s,ss); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmts ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ifend ::= ELSE LCURLBRACK fielddecllist stmts RCURLBRACK 
            {
              IfEnd RESULT =null;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FieldDecls fdl = (FieldDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList ss = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfEnd(fdl, ss); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifend",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ifend ::= 
            {
              IfEnd RESULT =null;
		 RESULT = new IfEnd(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifend",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= name ASSIGN expr SEMICOLON 
            {
              Statement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(n, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= READ LPAREN readlist RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReadList rl = (ReadList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Statement(rl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= PRINT LPAREN printlist RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PrintLineList pl = (PrintLineList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Statement(pl, "print"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= PRINTLINE LPAREN printlinelist RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PrintLineList pl = (PrintLineList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Statement(pl, "printline"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= ID LPAREN RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Statement(i, "call empty"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= ID LPAREN args RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Statement(i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= RETURN SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Statement("", "void return"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= RETURN expr SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(e, "full return"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= name INCREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Statement(n, "increment"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= name DECREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Statement(n, "decrement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= WHILE LPAREN expr RPAREN LCURLBRACK fielddecllist stmts RCURLBRACK 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FieldDecls fdl = (FieldDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList ss = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(e, fdl, ss); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= IF LPAREN expr RPAREN LCURLBRACK fielddecllist stmts RCURLBRACK ifend 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FieldDecls fdl = (FieldDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList ss = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfEnd ie = (IfEnd)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Statement(e, fdl, ss, ie); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt ::= LCURLBRACK fielddecllist stmts RCURLBRACK optionalsemi 
            {
              Statement RESULT =null;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FieldDecls fdl = (FieldDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList ss = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OptionalSemi os = (OptionalSemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Statement(fdl, ss, os); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // printlinelist ::= printlist 
            {
              PrintLineList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrintLineList pl = (PrintLineList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrintLineList(pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // printlinelist ::= 
            {
              PrintLineList RESULT =null;
		 RESULT = new PrintLineList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // optionalsemi ::= SEMICOLON 
            {
              OptionalSemi RESULT =null;
		 RESULT = new OptionalSemi("accept"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // optionalsemi ::= 
            {
              OptionalSemi RESULT =null;
		 RESULT = new OptionalSemi("rejected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // printlist ::= expr 
            {
              PrintLineList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrintLineList(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // printlist ::= expr COMMA printlist 
            {
              PrintLineList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrintLineList pl = (PrintLineList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrintLineList(e, pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // readlist ::= name 
            {
              ReadList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadList(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // readlist ::= name COMMA readlist 
            {
              ReadList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReadList rl = (ReadList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadList(n, rl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= NUMBERLIT 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int n = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= name 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name i = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= ID LPAREN RPAREN 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Expr(i, "empty"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= ID LPAREN args RPAREN 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b1, "+", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b1, "-", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr MULTIPLY expr 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b1, "*", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= expr DIVIDE expr 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b1, "/", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr GREATER expr 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b1, ">", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr LESS expr 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b1, "<", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr GREATEREQUAL expr 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b1, ">=", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr LESSEQUAL expr 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b1, "<=", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr EQUAL expr 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b1, "==", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr NOTEQUAL expr 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b1, "<>", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b1, "||", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b1, "&&", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new Expr(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new Expr(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= CHARACTERLIT 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= STRINGLIT 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= FLOATLIT 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float f = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(b, "paren"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b, "not"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= LPAREN expr QUESTION expr COLON expr RPAREN 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr b3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(b1, b2, b3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= LPAREN type RPAREN expr 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b1, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= PLUS expr 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b, "preplus"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b, "preminus"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type ::= INTTYPE 
            {
              Type RESULT =null;
		 RESULT = new Type("int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type ::= CHARTYPE 
            {
              Type RESULT =null;
		 RESULT = new Type("char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type ::= BOOLTYPE 
            {
              Type RESULT =null;
		 RESULT = new Type("bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type ::= FLOATTYPE 
            {
              Type RESULT =null;
		 RESULT = new Type("float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // name ::= ID 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Name(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // name ::= ID LSQBRACK expr RSQBRACK 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Name(i, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
